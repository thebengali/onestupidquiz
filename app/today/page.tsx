'use client'; import React from 'react';
function todayISTISO(): string { const fmt=new Intl.DateTimeFormat('en-CA',{ timeZone:'Asia/Kolkata', year:'numeric', month:'2-digit', day:'2-digit' }); const parts=fmt.formatToParts(new Date()); const y=parts.find(p=>p.type==='year')!.value; const m=parts.find(p=>p.type==='month')!.value; const d=parts.find(p=>p.type==='day')!.value; return `${y}-${m}-${d}`; }
function getOrCreateUserId(): string { if (typeof window === 'undefined') return ''; const key='osq_user_id'; let v=localStorage.getItem(key); if(!v){ v='u_'+Math.random().toString(36).slice(2)+Date.now().toString(36); localStorage.setItem(key,v);} return v; }
function msUntilMidnightIST(): number { const now=new Date(); const parts=new Intl.DateTimeFormat('en-CA',{ timeZone:'Asia/Kolkata', year:'numeric', month:'2-digit', day:'2-digit' }).formatToParts(now); const y=Number(parts.find(p=>p.type==='year')!.value); const m=Number(parts.find(p=>p.type==='month')!.value); const d=Number(parts.find(p=>p.type==='day')!.value); const midnightISTNext=new Date(Date.UTC(y, m-1, d+1, 0, 0, 0)); return midnightISTNext.getTime()-now.getTime(); }
export default function Today(){ const [quiz,setQuiz]=React.useState<any>(null); const [answers,setAnswers]=React.useState<Record<string,any>>({}); const [loading,setLoading]=React.useState(true); const [streak,setStreak]=React.useState<number>(0); const [countdown,setCountdown]=React.useState<string>(''); React.useEffect(()=>{ const date=todayISTISO(); fetch(`/api/quiz?date=${date}`,{cache:'no-store'}).then(async r=>{ if(r.ok) setQuiz(await r.json()); setLoading(false);}); const id=getOrCreateUserId(); fetch(`/api/streak?user=${encodeURIComponent(id)}`).then(r=>r.json()).then(d=>setStreak(d.streak ?? 0)); const tick=()=>{ const ms=msUntilMidnightIST(); const s=Math.max(0, Math.floor(ms/1000)); const hh=String(Math.floor(s/3600)).padStart(2,'0'); const mm=String(Math.floor((s%3600)/60)).padStart(2,'0'); const ss=String(s%60).padStart(2,'0'); setCountdown(`${hh}:${mm}:${ss}`); }; tick(); const t=setInterval(tick,1000); return ()=>clearInterval(t); },[]); async function submit(){ if(!quiz) return; const id=getOrCreateUserId(); const body={ userId:id, quizDate:quiz.quiz_date, answers:Object.entries(answers).map(([questionId,value])=>({questionId,value})), tookMs:0 }; const res=await fetch('/api/submit',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body)}); const data=await res.json(); const params=new URLSearchParams({ points:String(data.stupid_points), correct:String(data.correct), total:String(data.total), label:String(data.label), date:String(quiz.quiz_date) }); window.location.href=`/result?${params.toString()}`; } if(loading) return <div>Loading…</div>; if(!quiz) return <div className='card'><h1>Today’s Quiz</h1><p>Quiz arrives at midnight IST. Check back soon.</p></div>; return (<div><h1>{quiz.title}</h1><p className='small'>Your streak: <strong>{streak}</strong> day(s) • Next quiz in <span className='mono'>{countdown}</span></p>{quiz.questions.map((q:any,i:number)=>(<section key={q.id} className='card'><p style={{margin:0,fontWeight:600}}>{i+1}. {q.prompt}</p>{Array.isArray(q.options)&&(<div style={{marginTop:8}}>{q.type==='mcq'&&q.options.map((opt:string)=>(<label key={opt}><input type='radio' name={q.id} value={opt} onChange={(e)=>setAnswers(a=>({...a,[q.id]: e.target.value}))}/> {' '}{opt}</label>))}{q.type==='mcmr'&&q.options.map((opt:string)=>(<label key={opt}><input type='checkbox' value={opt} onChange={(e)=>{ const prev=Array.isArray(answers[q.id])?answers[q.id]:[]; const next=e.target.checked?[...prev,opt]:prev.filter((x:string)=>x!==opt); setAnswers(a=>({...a,[q.id]:next})); }}/> {' '}{opt}</label>))}</div>)}</section>))}<button className='btn' onClick={submit} style={{marginTop:12}}>Submit</button></div>); }
