import { NextRequest, NextResponse } from 'next/server'; import { serverClient } from '@/lib/supabase'; import { pointsForQuestion, summarize } from '@/lib/stupidPoints';
export async function POST(req: NextRequest){ const body=await req.json(); if(!body?.quizDate||!Array.isArray(body?.answers)) return NextResponse.json({error:'Bad request'},{status:400}); const sb=serverClient(); const { data: quiz }=await sb.from('quizzes').select('id').eq('quiz_date',body.quizDate).eq('status','published').single(); if(!quiz) return NextResponse.json({error:'Quiz not found'},{status:404}); const { data: qs }=await sb.from('questions').select('id, type, answer').eq('quiz_id',quiz.id).order('idx'); if(!qs) return NextResponse.json({error:'Questions missing'},{status:500}); const amap=new Map(body.answers.map((a:any)=>[a.questionId,a.value])); let correct=0; let points=0; for(const q of qs){ const userA=amap.get(q.id); let isCorrect=false; if(q.type==='mcq'){ isCorrect=(userA===q.answer); } else if(q.type==='mcmr'){ if(Array.isArray(userA)){ const correctSet=JSON.stringify([...q.answer].sort()); const userSet=JSON.stringify([...userA].sort()); isCorrect=(userSet===correctSet);} } if(isCorrect) correct++; points+=pointsForQuestion(body.quizDate, q.id, isCorrect);} const summary=summarize(points, correct, qs.length); await sb.from('submissions').insert({ user_id: body.userId ?? null, quiz_id: quiz.id, answers: body.answers, correct_count: correct, stupid_points: summary.points, took_ms: body.tookMs ?? null }); return NextResponse.json({ correct, total: qs.length, stupid_points: summary.points, label: summary.label }); }
