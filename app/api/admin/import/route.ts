import { NextRequest, NextResponse } from 'next/server'; import { serverClient } from '@/lib/supabase';
export async function POST(req: NextRequest){ const key=req.headers.get('x-admin-key'); if(!key || key!==process.env.ADMIN_SECRET){ return NextResponse.json({error:'Unauthorized'},{status:401}); } const payload=await req.json(); if(!payload?.quizzes||!Array.isArray(payload.quizzes)) return NextResponse.json({error:'Invalid payload'},{status:400}); const sb=serverClient(); let inserted=0; for(const qz of payload.quizzes){ const { data: quiz, error: qe }=await sb.from('quizzes').upsert({ quiz_date:qz.quiz_date, title:qz.title || 'One Stupid Quiz', status:'published', publish_at:new Date().toISOString() }, { onConflict:'quiz_date' }).select().single(); if(qe) return NextResponse.json({error:qe.message},{status:400}); await sb.from('questions').delete().eq('quiz_id', quiz.id); for(const q of qz.questions){ await sb.from('questions').insert({ quiz_id:quiz.id, idx:q.idx, type:q.type||'mcq', prompt:q.prompt, options:q.options ?? null, answer:q.answer, explanation:q.explanation ?? null }); } inserted++; } return NextResponse.json({ ok:true, inserted }); }
